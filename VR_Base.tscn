[gd_scene load_steps=14 format=3 uid="uid://chrxf8egnesc5"]

[ext_resource type="PackedScene" uid="uid://bq86r4yll8po" path="res://addons/godot-xr-tools/hands/scenes/lowpoly/left_fullglove_low.tscn" id="1_b5v62"]
[ext_resource type="PackedScene" uid="uid://clc5dre31iskm" path="res://addons/godot-xr-tools/xr/start_xr.tscn" id="1_qq24q"]
[ext_resource type="PackedScene" uid="uid://xqimcf20s2jp" path="res://addons/godot-xr-tools/hands/scenes/lowpoly/right_fullglove_low.tscn" id="2_sypqw"]
[ext_resource type="PackedScene" uid="uid://bl2nuu3qhlb5k" path="res://addons/godot-xr-tools/functions/movement_direct.tscn" id="3_d1sxn"]
[ext_resource type="PackedScene" uid="uid://b6bk2pj8vbj28" path="res://addons/godot-xr-tools/functions/movement_turn.tscn" id="5_5ualu"]
[ext_resource type="PackedScene" uid="uid://diyu06cw06syv" path="res://addons/godot-xr-tools/player/player_body.tscn" id="6_6b3eg"]
[ext_resource type="Script" path="res://addons/godot-xr-tools/player/player_body.gd" id="7_mcskj"]

[sub_resource type="GDScript" id="GDScript_yhfd6"]
script/source = "@tool
class_name XRToolsMovementDirect
extends XRToolsMovementProvider


## XR Tools Movement Provider for Direct Movement
##
## This script provides direct movement for the player. This script works
## with the [XRToolsPlayerBody] attached to the players [XROrigin3D].
##
## The player may have multiple [XRToolsMovementDirect] nodes attached to
## different controllers to provide different types of direct movement.


## Movement provider order
@export var order : int = 10

## Movement speed
@export var max_speed : float = 3.0

## If true, the player can strafe
@export var strafe : bool = false

## Input action for movement direction
@export var input_action : String = \"primary\"


# Controller node
@onready var _controller := XRHelpers.get_xr_controller(self)


# Add support for is_xr_class on XRTools classes
func is_xr_class(name : String) -> bool:
	return name == \"XRToolsMovementDirect\" or super(name)


# Perform jump movement
func physics_movement(_delta: float, player_body: XRToolsPlayerBody, _disabled: bool):
	# Skip if the controller isn't active
	if !_controller.get_is_active():
		return

	## get input action with deadzone correction applied
	var dz_input_action = XRToolsUserSettings.get_adjusted_vector2(_controller, input_action)

	player_body.ground_control_velocity.y += dz_input_action.y * max_speed
	if strafe:
		player_body.ground_control_velocity.x += dz_input_action.x * max_speed

	# Clamp ground control
	var length := player_body.ground_control_velocity.length()
	if length > max_speed:
		player_body.ground_control_velocity *= max_speed / length


# This method verifies the movement provider has a valid configuration.
func _get_configuration_warnings() -> PackedStringArray:
	var warnings := super()

	# Check the controller node
	if !XRHelpers.get_xr_controller(self):
		warnings.append(\"This node must be within a branch of an XRController3D node\")

	# Return warnings
	return warnings


## Find the left [XRToolsMovementDirect] node.
##
## This function searches from the specified node for the left controller
## [XRToolsMovementDirect] assuming the node is a sibling of the [XROrigin3D].
static func find_left(node : Node) -> XRToolsMovementDirect:
	return XRTools.find_xr_child(
		XRHelpers.get_left_controller(node),
		\"*\",
		\"XRToolsMovementDirect\") as XRToolsMovementDirect


## Find the right [XRToolsMovementDirect] node.
##
## This function searches from the specified node for the right controller
## [XRToolsMovementDirect] assuming the node is a sibling of the [XROrigin3D].
static func find_right(node : Node) -> XRToolsMovementDirect:
	return XRTools.find_xr_child(
		XRHelpers.get_right_controller(node),
		\"*\",
		\"XRToolsMovementDirect\") as XRToolsMovementDirect
"

[sub_resource type="PlaneMesh" id="PlaneMesh_23m37"]
size = Vector2(10, 10)

[sub_resource type="BoxShape3D" id="BoxShape3D_pr4ux"]
size = Vector3(10, 1, 10)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_du5xn"]

[sub_resource type="Sky" id="Sky_3bqjq"]
sky_material = SubResource("ProceduralSkyMaterial_du5xn")

[sub_resource type="Environment" id="Environment_ebx01"]
background_mode = 2
sky = SubResource("Sky_3bqjq")

[node name="Node3D" type="Node3D"]

[node name="StartXR" parent="." instance=ExtResource("1_qq24q")]

[node name="XROrigin3D" type="XROrigin3D" parent="."]

[node name="XRCamera3D" type="XRCamera3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)

[node name="LeftController" type="XRController3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, -0.5)
tracker = &"left_hand"
pose = &"aim"

[node name="LeftHand" parent="XROrigin3D/LeftController" instance=ExtResource("1_b5v62")]

[node name="MovementDirect" parent="XROrigin3D/LeftController" instance=ExtResource("3_d1sxn")]

[node name="RightController" type="XRController3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0.5)
tracker = &"right_hand"
pose = &"aim"
script = SubResource("GDScript_yhfd6")

[node name="RightHand" parent="XROrigin3D/RightController" instance=ExtResource("2_sypqw")]

[node name="MovementDirect" parent="XROrigin3D/RightController" instance=ExtResource("3_d1sxn")]

[node name="MovementTurn" parent="XROrigin3D/RightController" instance=ExtResource("5_5ualu")]

[node name="PlayerBody" type="CharacterBody3D" parent="XROrigin3D" groups=["player_body"] instance=ExtResource("6_6b3eg")]
process_priority = -100
process_physics_priority = -100
top_level = true
collision_layer = 524288
collision_mask = 1023
script = ExtResource("7_mcskj")

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="MeshInstance3D" type="MeshInstance3D" parent="StaticBody3D"]
mesh = SubResource("PlaneMesh_23m37")

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
shape = SubResource("BoxShape3D_pr4ux")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ebx01")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.896911, 0.44221, 0, -0.44221, 0.896911, 0, 1.7772, 0)
